Time complexity- it is amount of time taken by algorithm to run.
Big O Notation-O
Big Theta-Q
Big Omega- _^_
_^_ Best Case - Constant
O Worst Case-> directly proportional to n
Q (theta) avg case- directly proportional to n

Avg Time-  1+ 2+ 3+ ...... +n/n= n(n+1)/2
Avg directly proportional to n.
  Best - omega(1)
  worst- O(n)
  Avg- theta(n)
  constant  Time- O(1)
  Linear Time- O(n)
  Logarthmic Time- O(log n)
  Quadratic Time-O(n^2)
  cubic Time- O(n^3)
  
  
  
  for(i=1 ;i<n;i++)--------------------------------------------------- O(n)\
                                                                             \        O(n *n)----O(n^2)--- Time Complexity
                                                                                      O(1)- --- Space Complexity
  {                                                                          /
     for(int j=1;j<n;j++) -----------------------------------------  O(n)   / 
     {
       cout << "">
       }
  }
  
  
  for(int i=0;i<10;i++)-----------------  O(1)---------Time Complexity
                                          O(1)--------space complexity
  {
    some constant statement
    }




for(i=0 to n)
{
 --------
  --------
  }
  TC- O(n)
  SC- O(1)
  
  
  for( i=1 to n)---------n______________________________________________________|
  {                                                                              |   TC- O(n^3)
    for(i=1 to n)--------------------------------------------n                   |   SC- O(1)
    {                                                                            |
      for(i=1 to n)------------------------------n                               |
      {
        statement;
        }
   } 
   }
